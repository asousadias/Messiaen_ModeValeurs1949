; OM File Header - Saved 2020/04/29 20:56:37
; (6.16 :patc (om-make-point 24 24) (om-make-point 166 23) (om-make-point 622 677) "" 183 0 nil "2020/04/29 20:56:37")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"modes_prep.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "modes" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 385 101) (quote "Olivier Messiaen - Mode de valeurs et d'intensités (1949)$$The three modes setup$$Antonio de Sousa Dias$a.sousadias@belasartes.ulisboa.pt") nil (om-make-point 66 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "modes_prep 4" (quote ("elements" "authors" "messiaen" "messiaen_1949_mode_de_valeurs_et_d_intensites" "modes_prep")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "pitch" nil) (om-load-inputfun (quote input-funbox) "no documentation" "length" nil) (om-load-inputfun (quote input-funbox) "no documentation" "velocity" nil) (om-load-inputfun (quote input-funbox) "no documentation" "channel" nil))) (om-make-point 325 470) (om-make-point 158 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "modes_prep 3" (quote ("elements" "authors" "messiaen" "messiaen_1949_mode_de_valeurs_et_d_intensites" "modes_prep")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "pitch" nil) (om-load-inputfun (quote input-funbox) "no documentation" "length" nil) (om-load-inputfun (quote input-funbox) "no documentation" "velocity" nil) (om-load-inputfun (quote input-funbox) "no documentation" "channel" nil))) (om-make-point 160 469) (om-make-point 124 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "modes_prep 2" (quote ("elements" "authors" "messiaen" "messiaen_1949_mode_de_valeurs_et_d_intensites" "modes_prep")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "pitch" nil) (om-load-inputfun (quote input-funbox) "no documentation" "length" nil) (om-load-inputfun (quote input-funbox) "no documentation" "velocity" nil) (om-load-inputfun (quote input-funbox) "no documentation" "channel" nil))) (om-make-point 39 474) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 108 105) "modes base time - 125ms" "base_ms" 125 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 188 44) (quote "28, 34 50 half tones difference for each mode") "" (om-make-point 354 155) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output3" 3 (om-make-point 500 257) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output2" 2 (om-make-point 355 564) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "mode 3 data" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 182 563) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "mode 2 data" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 36 558) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "mode 1 data" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch2" (om-load-patch-abs1 "intensities" (quote ((let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 34 35) (om-make-point 170 26) (list 19 30 43 58 70 90 110 120) "(19 30 43 58 70 90 110 120)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 118 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 151 61) (om-make-point 164 25) (list 0 0 6 5 4 6 5 4 6 1 6 2) "(0 0 6 5 4 6 5 4 6 1 6 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 71 23) (quote "l intensities") "" (om-make-point 238 7) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH1" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 202 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux21" (quote t) (quote nil) (om-make-point 230 96) (om-make-point 164 25) (list 6 4 4 2 1 2 2 2 5 5 5 5) "(6 4 4 2 1 2 2 2 5 5 5 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH11" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 321 225) (om-make-point 63 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux211" (quote t) (quote nil) (om-make-point 295 120) (om-make-point 164 25) (list 6 6 4 1 2 5 6 4 6 6 7 7) "(6 6 4 1 2 5 6 4 6 6 7 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output2" 2 (om-make-point 325 291) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 208 296) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 128 298) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 1) (2 0 1 1 nil 0) (0 0 4 0 nil 1) (5 0 4 1 nil 0) (0 0 6 0 nil 1) (7 0 6 1 nil 0) (6 0 8 0 nil 0) (4 0 9 0 nil 0) (1 0 10 0 nil 0))) 6.16 nil "" (om-make-point 573 234) (om-make-point 513 513)) (quote nil) (om-make-point 252 140) nil nil nil "intensities"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pitch_lists" (om-load-patch-abs1 "pitch_lists" (quote ((let ((box (om-load-boxout "output2" 2 (om-make-point 407 265) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 238 276) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 17 278) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 380 50) (om-make-point 285 62) (list 7500 7400 6900 6700 6600 6000 5800 5300 4700 4000 3400 2500) "(7500 7400 6900 6700 6600 6000 5800 5300 4700 4000 3400 2500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 174 176) (om-make-point 197 65) (list 7900 7200 7000 6800 6500 6400 6300 6200 6100 5900 5300 4500) "(7900 7200 7000 6800 6500 6400 6300 6200 6100 5900 5300 4500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 9 42) (om-make-point 228 102) (list 9900 9800 9300 9200 9100 9000 8800 8500 8400 8200 7700 7100) "(9900 9800 9300 9200 9100 9000 8800 8500 8400 8200 7700 7100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 2 0 nil 0))) 6.16 nil "" (om-make-point 471 94) (om-make-point 744 611)) (quote nil) (om-make-point 64 144) nil nil nil "pitch_lists"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "duration_list" (om-load-patch-abs1 "duration_list" (quote ((let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 498 95) (om-make-point 13 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 334 45) (om-make-point 13 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 423 53) (om-make-point 21 28) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output3" 3 (om-make-point 500 354) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "duree base" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 440 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 294 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 82 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "one list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 3))) (om-make-point 469 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*211" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 419 282) (om-make-point 42 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*21" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 272 284) (om-make-point 42 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 54 280) (om-make-point 42 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 352 1) "octave duration factor" "factor" 2 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEOMETRIC-SER" (quote geometric-ser) (quote ((om-load-inputfun (quote input-funbox) "seed" "SEED" 1) (om-load-inputfun (quote input-funbox) "factor" "FACTOR" 2) (om-load-inputfun (quote input-funbox) "limit" "LIMIT" 40))) (om-make-point 328 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*11" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 500))) (om-make-point 398 319) (om-make-point 41 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 250))) (om-make-point 249 321) (om-make-point 41 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 125))) (om-make-point 37 319) (om-make-point 41 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output2" 2 (om-make-point 390 355) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "durees 3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 241 356) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "durees 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 29 355) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "durees 1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 217 102) "no documentation" "ms_base" 125 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 12) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 89 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((19 0 3 0 nil 2) (7 0 4 0 nil 0) (7 0 5 0 nil 0) (7 0 6 0 nil 0) (12 0 7 0 nil 0) (0 0 7 1 nil 0) (19 0 8 0 nil 2) (4 0 8 1 nil 0) (19 0 9 0 nil 2) (5 0 9 1 nil 0) (19 0 10 0 nil 2) (6 0 10 1 nil 0) (1 0 12 0 nil 0) (11 0 12 1 nil 0) (2 0 12 2 nil 0) (20 0 13 0 nil 1) (8 0 13 1 nil 0) (20 0 14 0 nil 1) (9 0 14 1 nil 0) (20 0 15 0 nil 1) (10 0 15 1 nil 0) (13 0 16 0 nil 0) (14 0 17 0 nil 0) (15 0 18 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 723 486)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" 125) (om-load-inputfun (quote input-funbox) "no documentation" "input1" 2))) (om-make-point 167 148) (om-make-point 59 61) nil nil "duration_list"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 46 23) (quote "mode 3") "" (om-make-point 393 298) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 46 23) (quote "mode 2") "" (om-make-point 262 297) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD11" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 3)))) (om-make-point 319 247) (om-make-point 73 168) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 7400 6900 6700 6600 6000 5800 5300 4700 4000 3400 2500)) :ldur (quote (500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000)) :lvel (quote (110 110 70 30 43 90 110 70 110 110 120 120)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (3 3 3 3 3 3 3 3 3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale player show-stems approx fontsize staff cmnpref deltapict outport inport zoom palette-mode obj-mode notechancolor? grillestep mode winsize winpos)) (list nil (quote :midi-player) (quote t) 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 0 0 nil 1000 3 (om-make-point 1011 454) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 2)))) (om-make-point 181 247) (om-make-point 65 175) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7200 7000 6800 6500 6400 6300 6200 6100 5900 5300 4500)) :ldur (quote (250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000)) :lvel (quote (110 70 70 43 30 43 43 43 90 90 90 90)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (2 2 2 2 2 2 2 2 2 2 2 2))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale player show-stems approx fontsize staff cmnpref deltapict outport inport zoom palette-mode obj-mode notechancolor? grillestep mode winsize winpos)) (list nil (quote :midi-player) (quote t) 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 0 0 nil 1000 0 18350450 2621450)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 46 23) (quote "mode 1") "" (om-make-point 126 297) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 49 247) (om-make-point 65 175) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900 9800 9300 9200 9100 9000 8800 8500 8400 8200 7700 7100)) :ldur (quote (125 250 375 500 625 750 875 1000 1125 1250 1375 1500)) :lvel (quote (19 19 110 90 70 110 90 70 110 30 110 43)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale player show-stems approx fontsize staff cmnpref deltapict outport inport zoom palette-mode obj-mode notechancolor? grillestep mode winsize winpos cursor-mode score-mode)) (list nil (quote :midi-player) (quote t) 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 0 0 nil 1000 3 (om-make-point 680 340) (om-make-point 14 53) (quote :normal) 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 1 1 0 nil 0) (15 4 1 1 nil 0) (15 2 1 2 nil 0) (15 5 1 3 nil 0) (16 1 2 0 nil 0) (16 4 2 1 nil 0) (16 2 2 2 nil 0) (16 5 2 3 nil 0) (18 1 3 0 nil 0) (18 4 3 1 nil 0) (18 2 3 2 nil 0) (18 5 3 3 nil 0) (12 3 6 0 nil 1) (1 0 7 0 nil 0) (2 0 8 0 nil 0) (3 0 9 0 nil 0) (4 0 12 0 nil 0) (11 2 15 1 nil 0) (10 2 15 2 nil 0) (12 2 15 4 nil 0) (11 1 16 1 nil 0) (10 1 16 2 nil 0) (12 1 16 4 nil 0) (11 0 18 1 nil 0) (10 0 18 2 nil 0) (12 0 18 4 nil 0))) nil 6.16))
