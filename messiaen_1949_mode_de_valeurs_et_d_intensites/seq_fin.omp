; OM File Header - Saved 2020/04/29 20:56:37
; (6.16 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 823 493) "" 183 0 nil "2020/04/29 20:47:27")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"serie_mode.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "seq_fin" (quote ((let ((box (om-load-boxcall (quote genfun) "OM*11" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 445 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 284 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 122 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "unit" 9 (om-make-point 539 5) "no documentation" "unit" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND1111" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 398 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND111" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 288 214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND11" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 196 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND1" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 96 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output4" 4 (om-make-point 414 289) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output3" 3 (om-make-point 291 288) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output2" 2 (om-make-point 199 287) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 102 292) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 17 295) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "serie_mode11" (quote ("elements" "authors" "messiaen" "messiaen_1949_mode_de_valeurs_et_d_intensites" "serie_mode")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "mode" nil) (om-load-inputfun (quote input-funbox) "no documentation" "serie" nil) (om-load-inputfun (quote input-funbox) "no documentation" "on_set" nil))) (om-make-point 332 105) (om-make-point 155 61) nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "serie_mode1" (quote ("elements" "authors" "messiaen" "messiaen_1949_mode_de_valeurs_et_d_intensites" "serie_mode")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "mode" nil) (om-load-inputfun (quote input-funbox) "no documentation" "serie" nil) (om-load-inputfun (quote input-funbox) "no documentation" "on_set" nil))) (om-make-point 166 107) (om-make-point 155 61) nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 13 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input8" 8 (om-make-point 449 2) "no documentation" "offset3" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input7" 7 (om-make-point 391 5) "no documentation" "serie3" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input6" 6 (om-make-point 341 5) "no documentation" "mode3" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input5" 5 (om-make-point 283 2) "no documentation" "offset2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input4" 4 (om-make-point 229 15) "no documentation" "serie2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input3" 3 (om-make-point 179 15) "no documentation" "mode2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 103 4) "no documentation" "offset1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 55 45) "no documentation" "serie1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" "mode1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "serie_mode" (quote ("elements" "authors" "messiaen" "messiaen_1949_mode_de_valeurs_et_d_intensites" "serie_mode")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "mode" nil) (om-load-inputfun (quote input-funbox) "no documentation" "serie" nil) (om-load-inputfun (quote input-funbox) "no documentation" "on_set" nil))) (om-make-point 4 107) (om-make-point 155 61) nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 0 nil 0) (3 0 0 1 nil 1) (19 0 1 0 nil 0) (3 0 1 1 nil 1) (22 0 2 0 nil 0) (3 0 2 1 nil 1) (25 4 4 0 nil 0) (14 4 4 1 nil 0) (13 4 4 2 nil 0) (25 3 5 0 nil 0) (14 3 5 1 nil 0) (13 3 5 2 nil 0) (25 2 6 0 nil 0) (14 2 6 1 nil 0) (13 2 6 2 nil 0) (25 1 7 0 nil 0) (14 1 7 1 nil 0) (13 1 7 2 nil 0) (4 0 8 0 nil 0) (5 0 9 0 nil 0) (6 0 10 0 nil 0) (7 0 11 0 nil 0) (15 0 12 0 nil 0) (18 0 13 0 nil 0) (17 0 13 1 nil 0) (0 0 13 2 nil 0) (21 0 14 0 nil 0) (20 0 14 1 nil 0) (1 0 14 2 nil 0) (25 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (24 0 25 0 nil 0) (23 0 25 1 nil 0) (2 0 25 2 nil 0))) nil 6.16))
