; OM File Header - Saved 2020/04/29 20:56:37
; (6.16 :patc (om-make-point 24 24) (om-make-point 514 23) (om-make-point 678 611) "" 183 0 nil "2020/04/29 20:56:37")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"serie_mode.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "seq_fin_ind" (quote ((let ((box (om-load-boxcall (quote abstraction) "mode_order_selection" (om-load-patch-abs1 "mode_order_selection" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 277 149) (quote "This mode selection sort option rearranges mode elements present in the score in different ways:$0 - original order by Messiaen$1 - random order$2 - mode elements sorted$3 - mode elements arranged by serial exposition atyempt") nil (om-make-point 552 48) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 70 364) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>=" (quote om>=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 3))) (om-make-point 436 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 440 410) (om-make-point 78 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM= 3" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 2))) (om-make-point 297 363) (om-make-point 36 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 320 410) (om-make-point 78 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM= 2" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 1))) (om-make-point 177 363) (om-make-point 36 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 200 410) (om-make-point 78 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 80 410) (om-make-point 78 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONDITIONAL" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)))) (om-make-point 23 467) (om-make-point 544 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 211 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 374 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "ordonne_ser" (quote ((let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 176 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 262 414) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 143 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 161 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 121 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 317 319) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 18 311) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 252 339) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" 12) (om-load-inputfun (quote input-funbox) "times" "NUM" 8))) (om-make-point 277 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 356 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "DIVISOR" 12))) (om-make-point 384 260) (om-make-point 49 53) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 359 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 168 423) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 476 35) "no documentation" nil 12 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 117 53) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (9 0 2 0 nil 1) (6 0 2 1 nil 0) (8 0 3 0 nil 3) (5 0 3 1 nil 2) (9 0 4 0 nil 1) (4 0 5 0 nil 0) (8 0 5 1 nil 3) (3 0 6 0 nil 0) (5 1 6 1 nil 0) (0 0 7 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 610 546)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 513 258) nil nil nil "ordonne_ser"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sort option" 1 (om-make-point 444 38) "sorting mode. 0 original pitch order; 1- random order; 2 - element order; 3 - serial order attempt" "sort option" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list of mode data for score" 0 (om-make-point 135 25) "" "list of mode data for score" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 274 533) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 1 0 nil 3) (13 0 2 0 nil 3) (2 0 3 0 nil 0) (12 0 3 1 nil 0) (13 0 4 0 nil 3) (4 0 5 0 nil 0) (11 0 5 1 nil 0) (13 0 6 0 nil 3) (6 0 7 0 nil 0) (10 0 7 1 nil 0) (1 0 8 0 nil 0) (14 0 8 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (5 0 9 2 nil 0) (3 0 9 3 nil 0) (14 0 10 0 nil 0) (14 0 11 0 nil 0) (14 0 12 0 nil 0) (9 0 15 0 nil 0))) 6.16 nil "" (om-make-point 317 88) (om-make-point 928 622)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 72 249) nil nil nil "mode_order_selection"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "mode_organization" 4 (om-make-point 468 23) "" "mode_organization" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 343 73) (om-make-point 38 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output4" 4 (om-make-point 405 415) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "l_channel" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output3" 3 (om-make-point 330 413) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "l_vel" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output2" 2 (om-make-point 238 412) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "l_durs" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 141 417) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "l_onsets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 56 420) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "l_midic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input3" 3 (om-make-point 381 6) "no documentation" "unite" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 301 6) "no documentation" "offset1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 214 37) "no documentation" "serie1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 83 31) "no documentation" "mode1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "serie_mode" (quote ("elements" "authors" "messiaen" "messiaen_1949_mode_de_valeurs_et_d_intensites" "serie_mode")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "mode" nil) (om-load-inputfun (quote input-funbox) "no documentation" "serie" nil) (om-load-inputfun (quote input-funbox) "no documentation" "on_set" nil))) (om-make-point 50 341) (om-make-point 439 61) nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (1 0 0 1 nil 0) (9 0 2 0 nil 0) (8 0 2 1 nil 0) (12 4 3 0 nil 0) (12 3 4 0 nil 0) (12 2 5 0 nil 0) (12 1 6 0 nil 0) (12 0 7 0 nil 0) (0 0 12 0 nil 0) (10 0 12 1 nil 0) (2 0 12 2 nil 0))) nil 6.16))
