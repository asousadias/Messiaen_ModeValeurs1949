; OM File Header - Saved 2020/04/29 20:56:37
; (6.16 :patc (om-make-point 24 24) (om-make-point 143 64) (om-make-point 653 514) "" 183 0 nil "2020/04/29 20:56:37")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "serie_mode" (quote ((let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "one list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 183 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 213 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 103 213) "no documentation" "on_set" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 143 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output4" 4 (om-make-point 427 372) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "channel" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output3" 3 (om-make-point 345 371) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "veloc" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output2" 2 (om-make-point 270 372) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "dur" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 164 391) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "on_set" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 51 376) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "midic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH111" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" 3) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 425 219) (om-make-point 33 37) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH11" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" 2) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 354 222) (om-make-point 33 37) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH1" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" 1) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 279 225) (om-make-point 33 37) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" 0) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 55 220) (om-make-point 33 37) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 230 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 230 14) "no documentation" "serie" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 79 5) "no documentation" "mode" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 112 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 0 1 nil 0) (11 0 1 0 nil 0) (2 0 3 0 nil 0) (11 0 3 1 nil 0) (9 0 4 0 nil 0) (10 0 5 0 nil 0) (11 0 6 0 nil 0) (0 0 7 0 nil 0) (12 0 8 0 nil 0) (13 0 9 1 nil 0) (13 0 10 1 nil 0) (13 0 11 1 nil 0) (13 0 12 1 nil 0) (16 0 13 0 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 0))) nil 6.16))
